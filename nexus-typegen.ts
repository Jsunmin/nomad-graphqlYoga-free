/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  JustResponse: { // root type
    code: string; // String!
    message: string; // String!
  }
  Movie: { // root type
    id: number; // Int!
    language: string; // String!
    medium_cover_image: string; // String!
    rating: number; // Float!
    summary: string; // String!
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  Response: { // root type
    code: string; // String!
    message: string; // String!
    movie: NexusGenRootTypes['Movie']; // Movie!
  }
  Subscription: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  JustResponse: { // field return type
    code: string; // String!
    message: string; // String!
  }
  Movie: { // field return type
    id: number; // Int!
    language: string; // String!
    medium_cover_image: string; // String!
    rating: number; // Float!
    summary: string; // String!
    title: string; // String!
  }
  Mutation: { // field return type
    addMovie: NexusGenRootTypes['Response']; // Response!
  }
  Query: { // field return type
    givemeError: string | null; // String
    movie: NexusGenRootTypes['Movie']; // Movie!
    movies: Array<NexusGenRootTypes['Movie'] | null>; // [Movie]!
    suggestions: Array<NexusGenRootTypes['Movie'] | null>; // [Movie]!
  }
  Response: { // field return type
    code: string; // String!
    message: string; // String!
    movie: NexusGenRootTypes['Movie']; // Movie!
  }
  Subscription: { // field return type
    movieDelete: NexusGenRootTypes['JustResponse']; // JustResponse!
  }
}

export interface NexusGenFieldTypeNames {
  JustResponse: { // field return type name
    code: 'String'
    message: 'String'
  }
  Movie: { // field return type name
    id: 'Int'
    language: 'String'
    medium_cover_image: 'String'
    rating: 'Float'
    summary: 'String'
    title: 'String'
  }
  Mutation: { // field return type name
    addMovie: 'Response'
  }
  Query: { // field return type name
    givemeError: 'String'
    movie: 'Movie'
    movies: 'Movie'
    suggestions: 'Movie'
  }
  Response: { // field return type name
    code: 'String'
    message: 'String'
    movie: 'Movie'
  }
  Subscription: { // field return type name
    movieDelete: 'JustResponse'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addMovie: { // args
      rating: number; // Int!
      title: string; // String!
    }
  }
  Query: {
    movie: { // args
      id: number; // Int!
    }
    movies: { // args
      limit?: number | null; // Int
      rating?: number | null; // Float
    }
    suggestions: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}