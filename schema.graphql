### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type JustResponse {
  code: String!
  message: String!
}

type Movie {
  id: Int!
  language: String!
  medium_cover_image: String!
  rating: Float!
  summary: String!
  title: String!
}

input MovieCreateInput {
  createdAt: DateTime
  language: String!
  medium_cover_image: String!
  rating: Float
  summary: String!
  title: String!
  updatedAt: DateTime
}

input MovieOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  language: SortOrder
  medium_cover_image: SortOrder
  rating: SortOrder
  summary: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input MovieUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  medium_cover_image: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  summary: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  language: StringFilter
  medium_cover_image: StringFilter
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  rating: FloatFilter
  summary: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input MovieWhereUniqueInput {
  id: Int
}

type Mutation {
  addMovie(rating: Int!, title: String!): Response!
  createOneMovie(data: MovieCreateInput!): Movie!
  deleteOneMovie(where: MovieWhereUniqueInput!): Movie
  updateOneMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  getmovie(id: Int!): Movie!
  getmovies(limit: Int, rating: Float): [Movie]!
  givemeError: String
  movie(where: MovieWhereUniqueInput!): Movie
  movies(after: MovieWhereUniqueInput, before: MovieWhereUniqueInput, first: Int, last: Int, orderBy: [MovieOrderByInput!], where: MovieWhereInput): [Movie!]!
  suggestions(id: Int!): [Movie]!
}

type Response {
  code: String!
  message: String!
  movie: Movie!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  movieDelete: JustResponse!
}
